/*******************************************************************************

              Copyright (С) 2012 Юрий Владимирович Круглов

   Эта программа является свободным программным обеспечением. Вы можете
   распространять и/или  модифицировать её согласно условиям Стандартной
   Общественной Лицензии GNU, опубликованной Организацией Свободного
   Программного Обеспечения, версии 3, либо по Вашему желанию, любой более
   поздней версии.

   Эта программа распространяется в надежде на то, что окажется полезной, но
   БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ, даже без подразумеваемых гарантий ОКУПАЕМОСТИ или
   СООТВЕТСТВИЯ КОНКРЕТНЫМ ЦЕЛЯМ.
   Подробнее - см. Стандартной Общественную Лицензию GNU.

   Вы должны были получить копию Основной Общественной Лицензии GNU вместе с
   этой программой. При её отсутствии обратитесь на сайт
   http://www.gnu.org/licenses/.

********************************************************************************

                   Copyright (C) 2012 Yuri V. Krugloff

   This program is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License as published by the Free
   Software Foundation, either version 3 of the License, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
   more details.

   You should have received a copy of the GNU General Public License
   along with this program. If not, see <http://www.gnu.org/licenses/>.

*******************************************************************************/

#ifndef __PRODUCERLOCKER__HPP__E7E6CC3E_23E5_466A_81FF_4B766867B634__
#define __PRODUCERLOCKER__HPP__E7E6CC3E_23E5_466A_81FF_4B766867B634__

#include "SemaphoreEx.hpp"
#include <QList>

//------------------------------------------------------------------------------
//! Специальный блокировщик потока-производителя.
/*!
   Класс специального блокировщика используется для блокирующего потребителя.
   Блокирующий потребитель должен заблокировать выполнение производителя до тех
   пор, пока не отработает сам. В то же время, блокирующий потребитель не должен
   останавливать работу других потребителей, как блокирующих, так и
   неблокирующих. Производитель может продолжать работу только после того как
   завершат работу все блокирующие потребители.

   Принцип работы с классом следующий.
   1) Производитель генерирует блок данных.
   2) Производитель инициализирует блокировщик вызовом метода \c init, передавая
      ему в качестве аргумента число блокирующих потребителей.
   3) Производитель освобождает семафоры.
   4) Производитель вызывает метод wait, который блокирует поток, пока все
      блокирующие потребители не обработают блок.
   5) Блокирующий потребитель, обработав блок, вызывает метод release.

   \remarks Освобождать семафоры до вызова метода init нельзя. В противном
     случае может возникнуть ситуация, когда разблокированный потребитель
     выполнит свою работу и вызовет release до того как производитель вызовет
     init.

   \remarks Возможна ситуация, когда блокирующий потребитель по каким-либо
     причинам не закончит работу и будет разрегистрирован в синхронизаторе.
     В этом случае синхронизатор должен будет вызвать метод \c release,
     который освободит одну позицию семафора. Однако, возможна также ситуация,
     когда потребитель закончит работу и только затем будет разрегистрирован.
     в этом случае возможен повторный вызов метода \c release, что приведёт к
     сбою счётчика. Чтобы в этом случае блокировщик отработал корректно,
     метод \c release принимает в качестве аргумента указатель, однозначно
     характеризующий потребителя (например, это может быть дескриптор потока
     или указатель на экземпляр объекта QThread). Повторный вызов \c release
     с тем же самым параметром не приведёт к изменению счётчика.
 */

class TProducerLocker
{
    private :
        TSemaphoreEx m_Semaphore;  //!< Семафор.
        int          m_N;          //!< Число блокирующих потребителей.
        QList<void*> m_Released;   //!< Список блокирующих потребителей,
                                   //!< закончивших работу.
    public :
        TProducerLocker();
        ~TProducerLocker();

        void init(int n);
        void release(void* pConsumer);
        void wait();
        void unlock();
        bool isUnlocked() const;
        QList<void*> releasedList() const;
        int releasedCount() const;
        bool isReleased(void* pConsumer) const;
};

//------------------------------------------------------------------------------

#endif // __PRODUCERLOCKER__HPP__E7E6CC3E_23E5_466A_81FF_4B766867B634__
