/*******************************************************************************

              Copyright (С) 2012 Юрий Владимирович Круглов

   Эта программа является свободным программным обеспечением. Вы можете
   распространять и/или  модифицировать её согласно условиям Стандартной
   Общественной Лицензии GNU, опубликованной Организацией Свободного
   Программного Обеспечения, версии 3, либо по Вашему желанию, любой более
   поздней версии.

   Эта программа распространяется в надежде на то, что окажется полезной, но
   БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ, даже без подразумеваемых гарантий ОКУПАЕМОСТИ или
   СООТВЕТСТВИЯ КОНКРЕТНЫМ ЦЕЛЯМ.
   Подробнее - см. Стандартной Общественную Лицензию GNU.

   Вы должны были получить копию Основной Общественной Лицензии GNU вместе с
   этой программой. При её отсутствии обратитесь на сайт
   http://www.gnu.org/licenses/.

********************************************************************************

                   Copyright (C) 2012 Yuri V. Krugloff

   This program is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License as published by the Free
   Software Foundation, either version 3 of the License, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
   more details.

   You should have received a copy of the GNU General Public License
   along with this program. If not, see <http://www.gnu.org/licenses/>.

*******************************************************************************/

#include "ThreadEx.hpp"

//------------------------------------------------------------------------------
//! Конструктор.

TThreadEx::TThreadEx(QObject* Parent)
    : QThread(Parent),
      m_Paused(false),
      m_Cancel(false)
{
}

//------------------------------------------------------------------------------
//! Деструктор.

TThreadEx::~TThreadEx()
{
}

//------------------------------------------------------------------------------
//! "Точка паузы".
/*!
   Поток должен вызвать этот метод в той точке, где он может быть приостановлен
   на неопределённое время.

   \sa pause, resume
 */

void TThreadEx::pausePoint()
{
    m_PauseMutex.lock();
    if (m_Paused)
        m_PauseCondition.wait(&m_PauseMutex);
    m_PauseMutex.unlock();
}

//------------------------------------------------------------------------------
//! "Точка отмены".
/*!
   В той точке, где поток может быть прерван, он должен вызвать один из методов
   cancelPoint или \c isCancelled. Оба метода не меняют состояние потока, а
   лишь возвращают флаг отмены. Поток-потомок должен сам выполнить корректное
   завершение своей работы.

   \sa isCancelled
 */

bool TThreadEx::cancelPoint()
{
    return m_Cancel;
}

//------------------------------------------------------------------------------
//! Приостановка выполнения потока.
/*!
   Устанавливает флаг приостановки потока. Действие этого метода не мгновенно,
   поток может быть приостановлен только в тех точках, где он сам вызывает
   метод pausePoint.

   \sa resume, pausePoint
 */

void TThreadEx::pause()
{
    QMutexLocker Locker(&m_PauseMutex);
    Q_UNUSED(Locker);

    m_Paused = true;
}

//------------------------------------------------------------------------------
//! Возобновление выполнения потока.
/*!
   Снимает флаг приостановки потока и запускает его.
 */

void TThreadEx::resume()
{
    QMutexLocker Locker(&m_PauseMutex);
    Q_UNUSED(Locker);

    m_Paused = false;
    m_PauseCondition.wakeAll();
}

//------------------------------------------------------------------------------
//! Отмена выполнения потока.
/*!
   Метод устанавливает флаг отмены выполнения потока. Прерывания потока не
   происходит. Поток-потомок должен проверять состояние флага отмены одним из
   методов \c cancelPoint или \c isCancelled. Чтобы вернуть флаг отмены в
   исходное состояние, вызовите метод clearFlags.

   \remarks Если поток приостановлен, метод не снимет поток с паузы. Для
     отмены приостановленных потоков используйте последовательные вызовы
     методов cancel и \c resume.
 */

void TThreadEx::cancel()
{
    m_Cancel = true;
}

//------------------------------------------------------------------------------
//! Очистка флагов состояний.
/*!
   Метод очищает флаги состояний "на паузе" и "отменено". Используйте этот
   метод для восстановления состояния потока, прерванного методом \c cancel.

   \sa isCancelled, pause, resume
 */

void TThreadEx::clearStateFlags()
{
    m_Cancel = false;
    m_Paused = false;
}

//------------------------------------------------------------------------------
//! Флаг приостановки выполнения потока.
/*!
   Возвращает true, если выполнение заданий приостановлено и false в противном
   случае.
 */

bool TThreadEx::isPaused() const
{
    QMutexLocker Locker(&m_PauseMutex);
    Q_UNUSED(Locker);

    return m_Paused;
}

//------------------------------------------------------------------------------
